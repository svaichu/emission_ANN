function [Y,Xf,Af] = myNeuralNetworkFunction(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 26-Dec-2018 14:32:24.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = Qx7 matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = Qx3 matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [1;1000;2;0;0;0.581077;30.891266];
x1_step1.gain = [0.0338983050847458;0.002;0.25;0.02;0.02;0.75571138324278;0.0157251181416332];
x1_step1.ymin = -1;

% Layer 1
b1 = [0.46226933566056394032;-0.42911163171413796436;-0.31280679838583802521;0.40243150590586046489;-1.5700117837070877158;0.21744936035924503082;0.85002236225362548527;0.39848384083761256846;1.1981694729780427711;-0.045236657853317270572];
IW1_1 = [0.71788749737963764019 0.31560601624207301752 -0.65479903368793246354 -0.16099305230093885477 0.16099305230753713225 -0.0052167967798416783193 0.4708285828873371992;-0.085537259605330498435 0.088004126866880458269 -0.45707410490963562566 -0.2448530333829452843 0.24485303338617922519 0.67365026471086475457 -0.18436857795816893879;0.0040881509103268855176 0.60400657851519279351 -1.0239128865087725462 -0.19157848440974162285 0.19157848440375557786 0.067936086940189807648 0.32780267059035472776;-0.21531069818961867668 0.41949007522777376211 0.41775468759338180158 0.052243041311617083311 -0.052243041318807137419 0.012100772586869404726 -0.083108894759525153706;0.9083095852180326224 -0.49999664533854160098 0.087471182523762264216 0.012546989784291707679 -0.012546989836387991563 -0.32339182287529050219 -0.74378421718193965528;1.0505186954975134217 -0.44725337058365588483 -0.23064178988400618753 0.18429893075008391135 -0.18429893074324968372 0.39697159475749432822 -0.087444443355254655725;0.1266214284860697481 -0.94391679338978673464 -0.90610129270031825044 -0.1617596724303707878 0.16175967243587732747 -0.044254983579770139357 0.31376856929862179113;-0.10404717804655184976 0.51451121046283387894 0.50181352269494128304 0.23122548975939963278 -0.2312254897589980096 0.5410350818334510592 0.33612623404297453655;-1.1932106392124939287 -0.80602519059615906905 -0.77694891813097166633 -0.24052406449688207291 0.24052406448689780949 0.31464780204870795854 0.20223205404612887293;0.45401902695654605679 0.11019432157495519242 0.74753148595906004914 -0.028080652002430393777 0.028080652001923504107 0.087688850320970013197 0.41072508929746037731];

% Layer 2
b2 = [0.77906221539738707005;0.71810211332236073556;-0.54014401239783438324];
LW2_1 = [-0.22738298646549387483 -0.055117294612522592379 0.15218727113716912225 0.7645865765147483728 1.5307370252016223588 -0.76016956043390582209 -0.31187665012269777387 0.24592202601068752221 0.17759301078227207604 -0.33273774478286516354;0.49015175548534889449 0.68776997955167884502 -0.6759206904160453 0.82425312265903449838 2.4138025797041304799 1.0712269382653536454 0.91895717398893195238 -0.56973586672727438707 -0.62593550330985936458 -0.56064157572432848919;-0.32196607286861828046 -0.4109063226331857166 -0.013963295940666212158 -0.47874785645285478086 -0.018099764794296018672 1.0172830020577734444 0.35223368774055890951 0.12528302313028527593 -0.050416809267065668121 -0.32048495709360497186];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [0.364843132046945;0.000848825471600589;6.00305810337202];
y1_step1.xoffset = [1.270924;270.350385;0.05729801325];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
    X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},1); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    X{1,ts} = X{1,ts}';
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
    Y{1,ts} = Y{1,ts}';
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
    Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
